---
openapi: 3.0.2
info:
  version: 1.0.0
  title: Common Logging Service API
  description: >-
    CLOGS - A common hosted service (API) for writing log messages to a central
    repository.
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca
servers:
  - url: /api/v1
    description: This Server
security:
  - OpenID: []
paths:
  /health:
    get:
      summary: Returns health checks of external service dependencies.
      description: >-
        This endpoint returns the state and connectivity of any external
        services CLOGS depends on.
      operationId: getHealth
      tags:
        - Health
      responses:
        "200":
          description: Returns the healthiness of the service dependencies
          content:
            application/json:
              schema:
                type: object
                required:
                  - dependencies
                properties:
                  dependencies:
                    type: array
                    description: A list of Health states
                    items:
                      $ref: "#/components/schemas/Health"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /log:
    post:
      summary: Log a message
      description: >-
        This endpoint accepts a document template and a set (or multiple sets)
        of subsitution variables and merges them into the document.
      operationId: postLog
      tags:
        - Log
      security:
        - OpenID:
            - LOGGER
      requestBody:
        description: Fields required to write a log message
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoggingObject"
      responses:
        "201":
          description: The request has been fulfilled and has resulted in one or more new resources being created
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      openIdConnectUrl: >-
        https://sso.pathfinder.gov.bc.ca/auth/realms/jbd6rnxw/.well-known/openid-configuration
  schemas:
    BadRequest:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: "https://httpstatuses.com/400"
    Error:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: "https://httpstatuses.com/500"
    Health:
      type: object
      required:
        - name
        - healthy
      properties:
        name:
          type: string
          description: The name of the dependency
          example: logstash
        healthy:
          type: boolean
          description: Is the dependency reachable/alive
        info:
          type: string
          description: >-
            Any extra information, generally useful when dependency is
            unreachable
          example: Logstash could not be reached, status is 403.
    LoggingObject:
      type: array
      description: Contains an array of Logging Entry Objects.
      items:
        oneOf:
          - $ref: "#/components/schemas/LoggingEntryDataObject"
          - $ref: "#/components/schemas/LoggingEntryMessageObject"
    LoggingEntryBaseObject:
      type: object
      description: >-
        Contains the message to log. The Message or Data field must be provided.
        Pattern field is an optional Grok filter and is used to parse Message.
        Level and Retention fields are optional.
      properties:
        level:
          type: string
          description: An optional logging level. Defaults to info if not specified.
          example: info
        pattern:
          type: string
          description: An optional Grok pattern used to parse message field
          example: >-
            %{IP:client} \- %{USER:remoteUser} \[%{HTTPDATE:rawTimestamp}\]
            \"%{WORD:httpMethod} %{PATH:path} HTTP\/%{DATA:httpVersion}\"
            %{NUMBER:httpStatus} %{NUMBER:contentLength} \"%{DATA:referrer}\"
            \"%{DATA:userAgent}\"
        retention:
          type: string
          description: >-
            An optional unique string representing the intended retention policy
            this entry should follow. Will default to value 'default' if not
            specified.
          example: default
    LoggingEntryDataObject:
      allOf:
        - $ref: "#/components/schemas/LoggingEntryBaseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: object
              description: A message to log in JSON form
              example: >-
                {"client": "172.51.124.1","remoteUser": "-","timestamp":
                "2/Jan/2020:16:04:10 +0000"}
    LoggingEntryMessageObject:
      allOf:
        - $ref: "#/components/schemas/LoggingEntryBaseObject"
        - type: object
          required:
            - message
          properties:
            message:
              type: string
              description: A message to log
              example: >-
                ::ffff:172.51.124.1 - - [2/Jan/2020:16:04:10 +0000] "GET
                /pathtonowhere/here/there HTTP/1.1" 302 40 "-"
                "kube-probe/1.11+"
    NotFound:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: "https://httpstatuses.com/404"
    Problem:
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          description: "What type of problem, link to explanation of problem"
        title:
          type: string
          description: "Title of problem, generally the Http Status Code description"
        status:
          type: string
          description: The Http Status code
        detail:
          type: string
          description: Short description of why this problem was raised.
    ValidationError:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  value:
                    type: object
                    description: Contents of the field that was in error.
                    example: utf-8x
                  message:
                    type: string
                    description: The error message for the field.
                    example: Invalid value `encoding`.
            status:
              example: 422
            title:
              example: Unprocessable Entity
            type:
              example: "https://httpstatuses.com/422"
  responses:
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequest"
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Lack required role to perform action
    NoContent:
      description: Accepted and no content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"
    UnauthorizedError:
      description: Access token is missing or invalid
    UnprocessableEntity:
      description: >-
        The server was unable to process the contained instructions. Generally
        validation error(s).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
